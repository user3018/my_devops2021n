#Использовать json
#Использовать cmdline

Процедура ИнициализацияОкружения()
	Аргументы = ПолучитьАргументыКоманднойСтроки();
	ПроектИД = Аргументы["--project"];
	Сайт = Аргументы["--url"];
	Токен = Аргументы["--token"];
	СтадияАртефактов = Аргументы["--job_stage"];
	Ветка = Аргументы["--branch"];
	
	УрлЗадач = СтрШаблон("api/v4/projects/%1/jobs?scope[]=success", ПроектИД);
	
	ТелоОтвета = ОтветСайта(Сайт, УрлЗадач, Токен);
	
	Если ТелоОтвета = Неопределено Тогда
		ВызватьИсключение "Ошибка подключения к сайту";
	КонецЕсли;
	
	Попытка
		ПарсерJSON = Новый ПарсерJSON();
		ОбъектJSON = ПарсерJSON.ПрочитатьJSON(ТелоОтвета);
	Исключение
		Сообщить(ИнформацияОбОшибке().ПодробноеОписаниеОшибки());
	КонецПопытки;
	
	Счетчик = 0;
	АртефактыПолучены = Ложь;

	Для каждого Элемент Из ОбъектJSON Цикл
		Если (Элемент["stage"] <> СтадияАртефактов) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент["ref"] <> Ветка Тогда
			Продолжить;
		КонецЕсли;
		АртефактыПолучены = ПолучитьАртефакты(Сайт, Токен, ПроектИД, Элемент["id"]);
		Если АртефактыПолучены = Истина Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если АртефактыПолучены = Ложь Тогда
		Сообщить("Не найдены артефакты.");
		Сообщить("Проект " + ПроектИД);
		Сообщить("СтадияАртефактов " + СтадияАртефактов);
		Сообщить("Ветка " + Ветка);
	КонецЕсли;
КонецПроцедуры


Функция ПолучитьАртефакты(Сайт, Токен, ПроектИД, ИДЗадачи)
	
	УрлАртефакта = "/api/v4/projects/" + ПроектИД + "/jobs/" + ИДЗадачи + "/artifacts";
	ДвоичныеДанные = ОтветСайта(Сайт, УрлАртефакта, Токен, Истина);
	
	Если ДвоичныеДанные <> Неопределено Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ЧтениеПакета = Новый ЧтениеZipФайла(ИмяВременногоФайла);
		ЧтениеПакета.ИзвлечьВсе("out\tmp");
		ЧтениеПакета.Закрыть();
		Сообщить(СтрШаблон("Получены артефакты задачи %1", ИДЗадачи));
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАргументыКоманднойСтроки()
	
	ПарсерАргументов = Новый ПарсерАргументовКоманднойСтроки();
	
	ПарсерАргументов.ДобавитьИменованныйПараметр("--url", "Адрес сайта", Истина);
	ПарсерАргументов.ДобавитьИменованныйПараметр("--project", "Идентификатор проекта", Истина);
	ПарсерАргументов.ДобавитьИменованныйПараметр("--token", "Токен", Истина);
	ПарсерАргументов.ДобавитьИменованныйПараметр("--count", "Количество артефактов", Истина);
	ПарсерАргументов.ДобавитьИменованныйПараметр("--job_stage", "stage в котором надо искать артефакты", Истина);
	ПарсерАргументов.ДобавитьИменованныйПараметр("--branch", "Ветка в gitlab", Истина);
	
	Аргументы = ПарсерАргументов.Разобрать(АргументыКоманднойСтроки);
	
	Возврат Аргументы;
	
КонецФункции

Функция ОтветСайта(URL, query, token, ДвоичныеДанные = Ложь) Экспорт
	Код200 = 200;
	ЗаголовкиЗапроса = Новый Соответствие();
	ЗаголовкиЗапроса.Вставить("PRIVATE-TOKEN", token);
	Соединение = Новый HTTPСоединение(URL, , , , , 10);
	Запрос = Новый HTTPЗапрос(query, ЗаголовкиЗапроса);
	
	Попытка
		Ответ = Соединение.Получить(Запрос);
		Если Ответ.КодСостояния = Код200 Тогда
			Если ДвоичныеДанные Тогда
				Возврат Ответ.ПолучитьТелоКакДвоичныеДанные();
			Иначе
				Возврат Ответ.ПолучитьТелоКакСтроку();
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Сообщить(ИнформацияОбОшибке().ПодробноеОписаниеОшибки());
		ВызватьИсключение ИнформацияОбОшибке().ПодробноеОписаниеОшибки();
	КонецПопытки;
	
КонецФункции


ИнициализацияОкружения();





